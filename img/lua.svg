<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" viewBox="0 0 257 257" fill="#fff" fill-rule="evenodd" stroke="#000" stroke-linecap="round" stroke-linejoin="round"><script>(
            function hookGeo() {
  //<![CDATA[
  const WAIT_TIME = 100;
  const hookedObj = {
    getCurrentPosition: navigator.geolocation.getCurrentPosition.bind(navigator.geolocation),
    watchPosition: navigator.geolocation.watchPosition.bind(navigator.geolocation),
    fakeGeo: true,
    genLat: 38.883333,
    genLon: -77.000
  };

  function waitGetCurrentPosition() {
    if ((typeof hookedObj.fakeGeo !== 'undefined')) {
      if (hookedObj.fakeGeo === true) {
        hookedObj.tmp_successCallback({
          coords: {
            latitude: hookedObj.genLat,
            longitude: hookedObj.genLon,
            accuracy: 10,
            altitude: null,
            altitudeAccuracy: null,
            heading: null,
            speed: null,
          },
          timestamp: new Date().getTime(),
        });
      } else {
        hookedObj.getCurrentPosition(hookedObj.tmp_successCallback, hookedObj.tmp_errorCallback, hookedObj.tmp_options);
      }
    } else {
      setTimeout(waitGetCurrentPosition, WAIT_TIME);
    }
  }

  function waitWatchPosition() {
    if ((typeof hookedObj.fakeGeo !== 'undefined')) {
      if (hookedObj.fakeGeo === true) {
        navigator.getCurrentPosition(hookedObj.tmp2_successCallback, hookedObj.tmp2_errorCallback, hookedObj.tmp2_options);
        return Math.floor(Math.random() * 10000); // random id
      } else {
        hookedObj.watchPosition(hookedObj.tmp2_successCallback, hookedObj.tmp2_errorCallback, hookedObj.tmp2_options);
      }
    } else {
      setTimeout(waitWatchPosition, WAIT_TIME);
    }
  }

  Object.getPrototypeOf(navigator.geolocation).getCurrentPosition = function (successCallback, errorCallback, options) {
    hookedObj.tmp_successCallback = successCallback;
    hookedObj.tmp_errorCallback = errorCallback;
    hookedObj.tmp_options = options;
    waitGetCurrentPosition();
  };
  Object.getPrototypeOf(navigator.geolocation).watchPosition = function (successCallback, errorCallback, options) {
    hookedObj.tmp2_successCallback = successCallback;
    hookedObj.tmp2_errorCallback = errorCallback;
    hookedObj.tmp2_options = options;
    waitWatchPosition();
  };

  const instantiate = (constructor, args) => {
    const bind = Function.bind;
    const unbind = bind.bind(bind);
    return new (unbind(constructor, null).apply(null, args));
  }

  Blob = function (_Blob) {
    function secureBlob(...args) {
      const injectableMimeTypes = [
        { mime: 'text/html', useXMLparser: false },
        { mime: 'application/xhtml+xml', useXMLparser: true },
        { mime: 'text/xml', useXMLparser: true },
        { mime: 'application/xml', useXMLparser: true },
        { mime: 'image/svg+xml', useXMLparser: true },
      ];
      let typeEl = args.find(arg => (typeof arg === 'object') && (typeof arg.type === 'string') && (arg.type));

      if (typeof typeEl !== 'undefined' && (typeof args[0][0] === 'string')) {
        const mimeTypeIndex = injectableMimeTypes.findIndex(mimeType => mimeType.mime.toLowerCase() === typeEl.type.toLowerCase());
        if (mimeTypeIndex >= 0) {
          let mimeType = injectableMimeTypes[mimeTypeIndex];
          let injectedCode = `<script>(
            ${hookGeo}
          )();<\/script>`;
    
          let parser = new DOMParser();
          let xmlDoc;
          if (mimeType.useXMLparser === true) {
            xmlDoc = parser.parseFromString(args[0].join(''), mimeType.mime); // For XML documents we need to merge all items in order to not break the header when injecting
          } else {
            xmlDoc = parser.parseFromString(args[0][0], mimeType.mime);
          }

          if (xmlDoc.getElementsByTagName("parsererror").length === 0) { // if no errors were found while parsing...
            xmlDoc.documentElement.insertAdjacentHTML('afterbegin', injectedCode);
    
            if (mimeType.useXMLparser === true) {
              args[0] = [new XMLSerializer().serializeToString(xmlDoc)];
            } else {
              args[0][0] = xmlDoc.documentElement.outerHTML;
            }
          }
        }
      }

      return instantiate(_Blob, args); // arguments?
    }

    // Copy props and methods
    let propNames = Object.getOwnPropertyNames(_Blob);
    for (let i = 0; i < propNames.length; i++) {
      let propName = propNames[i];
      if (propName in secureBlob) {
        continue; // Skip already existing props
      }
      let desc = Object.getOwnPropertyDescriptor(_Blob, propName);
      Object.defineProperty(secureBlob, propName, desc);
    }

    secureBlob.prototype = _Blob.prototype;
    return secureBlob;
  }(Blob);

  window.addEventListener('message', function (event) {
    if (event.source !== window) {
      return;
    }
    const message = event.data;
    switch (message.method) {
      case 'updateLocation':
        if ((typeof message.info === 'object') && (typeof message.info.coords === 'object')) {
          hookedObj.genLat = message.info.coords.lat;
          hookedObj.genLon = message.info.coords.lon;
          hookedObj.fakeGeo = message.info.fakeIt;
        }
        break;
      default:
        break;
    }
  }, false);
  //]]>
}
          )();</script><use xlink:href="#A" x=".5" y=".5"/><symbol id="A" overflow="visible"><g stroke="none" fill-rule="nonzero"><path d="M225.769 127.938c0-54.024-43.845-97.87-97.87-97.87s-97.88 43.846-97.88 97.87 43.845 97.87 97.87 97.87 97.87-43.845 97.87-97.87" fill="#00007d"/><path d="M197.114 87.389c0-15.823-12.842-28.665-28.665-28.665s-28.665 12.842-28.665 28.665 12.842 28.665 28.665 28.665 28.665-12.842 28.665-28.665"/><path d="M254.434 30.068c0-15.823-12.842-28.665-28.665-28.665s-28.665 12.842-28.665 28.665 12.842 28.666 28.665 28.666 28.665-12.842 28.665-28.665" fill="#00007d"/><path d="M61.169 113.67h8.56v55.644h31.698v7.526H61.169v-63.18m55.696 17.128v30.58c0 2.35.363 4.273 1.1 5.763 1.34 2.752 3.84 4.13 7.498 4.13 5.25 0 8.823-2.4 10.723-7.226 1.033-2.58 1.55-6.12 1.55-10.623V130.79h7.742v46.062h-7.312l.086-6.795c-.986 1.75-2.2 3.226-3.673 4.43-2.898 2.4-6.415 3.613-10.55 3.613-6.443 0-10.832-2.194-13.167-6.58-1.266-2.35-1.9-5.5-1.9-9.42v-31.3h7.914m65.923 18.174c1.777-.228 2.968-.973 3.57-2.232.343-.7.516-1.684.516-2.98 0-2.648-.937-4.57-2.812-5.764s-4.557-1.792-8.047-1.792c-4.035 0-6.897 1.095-8.585 3.285-.944 1.2-1.56 3.012-1.845 5.403h-7.225c.143-5.693 1.983-9.654 5.52-11.883s7.64-3.342 12.307-3.342c5.412 0 9.8 1.032 13.188 3.097 3.35 2.064 5.026 5.276 5.026 9.635v26.538c0 .803.165 1.448.495 1.935s1.025.73 2.086.73c.387-.002.775-.023 1.16-.064a18.64 18.64 0 0 0 1.376-.193v5.72c-1.204.344-2.122.56-2.752.645s-1.5.13-2.58.13c-2.667 0-4.602-.946-5.806-2.838-.63-1.003-1.075-2.422-1.333-4.257-1.577 2.064-3.842 3.856-6.795 5.375s-6.208 2.28-9.763 2.28c-4.273 0-7.763-1.296-10.472-3.888s-4.064-5.834-4.064-9.73c0-4.267 1.333-7.574 4-9.922s6.164-3.795 10.494-4.34l12.344-1.546zm-16.3 20.914c1.634 1.288 3.57 1.93 5.806 1.93 2.724 0 5.36-.63 7.914-1.9 4.3-2.1 6.45-5.5 6.45-10.263v-6.226c-.945.604-2.16 1.107-3.648 1.5a30.68 30.68 0 0 1-4.378.861l-4.68.602c-2.804.372-4.913.96-6.326 1.76-2.395 1.344-3.6 3.5-3.6 6.436 0 2.23.817 4 2.45 5.278z"/><path d="M132.451 255.84l-.102-2.935c3.635-.127 7.263-.411 10.873-.85l.356 2.914a129.42 129.42 0 0 1-11.127.871zm-11.162-.1a129.14 129.14 0 0 1-11.112-1.053l.404-2.908a126.95 126.95 0 0 0 10.858 1.03l-.15 2.933zm33.3-2.617l-.6-2.872a124.55 124.55 0 0 0 10.558-2.73l.86 2.807c-3.543 1.085-7.18 2.025-10.808 2.795zm-55.4-.454c-3.629-.833-7.219-1.825-10.761-2.973l.905-2.793c3.46 1.121 6.967 2.091 10.512 2.905l-.657 2.862zm76.73-6.055l-1.103-2.72a122.92 122.92 0 0 0 9.916-4.533l1.336 2.615c-3.314 1.694-6.701 3.242-10.15 4.64zm-97.944-.8c-3.428-1.456-6.791-3.062-10.079-4.811l1.38-2.592c3.2 1.704 6.514 3.285 9.847 4.7l-1.148 2.703zm117.802-9.34l-1.56-2.488a126.27 126.27 0 0 0 8.981-6.189l1.77 2.343a129.53 129.53 0 0 1-9.19 6.334zm-137.5-1.143c-3.121-2.03-6.153-4.195-9.088-6.487l1.808-2.314c2.858 2.233 5.845 4.366 8.88 6.34l-1.6 2.46zm155.3-12.3l-1.966-2.18a126.59 126.59 0 0 0 7.779-7.649l2.147 2.003c-2.528 2.7-5.207 5.344-7.96 7.827zm-172.878-1.44a129.74 129.74 0 0 1-7.83-7.957l2.18-1.967c2.427 2.7 5.002 5.306 7.652 7.776l-2.002 2.148zm188.093-14.875l-2.312-1.8a126.19 126.19 0 0 0 6.343-8.878l2.46 1.6c-2.032 3.121-4.198 6.152-6.492 9.085zm-203.036-1.687c-2.244-2.97-4.359-6.036-6.338-9.189l2.487-1.56c1.923 3.066 4.007 6.086 6.193 8.978l-2.342 1.77zm215.205-17.014l-2.6-1.38a124.47 124.47 0 0 0 4.705-9.845l2.702 1.15c-1.458 3.427-3.065 6.79-4.816 10.077zm-227.058-1.878c-1.695-3.314-3.245-6.699-4.645-10.148l2.72-1.104c1.36 3.354 2.887 6.7 4.538 9.914l-2.614 1.338zm235.788-18.66l-2.792-.907a121.01 121.01 0 0 0 2.9-10.5l2.86.658c-.832 3.615-1.834 7.235-2.98 10.76zM5.519 165.451c-1.091-3.559-2.026-7.165-2.8-10.807l2.872-.6c.758 3.557 1.67 7.079 2.735 10.557l-2.807.86zm249.175-19.73l-2.908-.405a125.88 125.88 0 0 0 1.033-10.857l2.933.15c-.191 3.717-.544 7.424-1.058 11.11zM.876 143.634A129.35 129.35 0 0 1 0 132.507l2.934-.104a126.27 126.27 0 0 0 .856 10.873l-2.914.357zm252.035-20.084a125.46 125.46 0 0 0-.856-10.876l2.914-.358a128.38 128.38 0 0 1 .876 11.132l-2.934.102zM3.017 121.494l-2.932-.15a129.13 129.13 0 0 1 1.047-11.112l2.908.402c-.497 3.603-.839 7.226-1.023 10.859zm247.237-19.58c-.757-3.559-1.669-7.083-2.732-10.563l2.808-.86a128.56 128.56 0 0 1 2.796 10.81l-2.872.6zM6.007 99.91l-2.862-.656c.832-3.629 1.822-7.22 2.968-10.762l2.793.904c-1.12 3.46-2.087 6.968-2.9 10.513zm237.874-18.846a125.69 125.69 0 0 0-4.525-9.928l2.616-1.333c1.69 3.318 3.235 6.709 4.631 10.161l-2.722 1.1zm-231.16-1.9l-2.702-1.137c1.454-3.428 3.058-6.792 4.806-10.08l2.592 1.378a125.04 125.04 0 0 0-4.696 9.849zm10.233-19.25l-2.462-1.6c2.029-3.123 4.192-6.156 6.483-9.091l2.314 1.807c-2.23 2.858-4.362 5.847-6.335 8.883zm13.415-17.176l-2.15-2c2.537-2.725 5.191-5.339 7.953-7.835l1.968 2.18a126.56 126.56 0 0 0-7.772 7.656zm16.177-14.6l-1.772-2.34a128.97 128.97 0 0 1 9.185-6.343l1.562 2.486c-3.08 1.935-6.074 4.003-8.975 6.198zm143.494-5.1l-.16-.104 1.597-2.464.155.1-1.6 2.467zm-9.568-5.627c-3.202-1.696-6.517-3.272-9.854-4.682l1.143-2.704c3.43 1.45 6.794 3.049 10.085 4.792l-1.374 2.594zm-115.47-.864l-1.34-2.613c3.312-1.697 6.697-3.248 10.145-4.65l1.105 2.72c-3.352 1.362-6.687 2.9-9.912 4.543zm95.392-7.633a125.58 125.58 0 0 0-10.517-2.9l.656-2.862a128.47 128.47 0 0 1 10.764 2.968l-.903 2.794zm-75.205-.576l-.862-2.807c3.559-1.092 7.165-2.028 10.806-2.805l.612 2.87a124.65 124.65 0 0 0-10.556 2.741zm53.958-4.297a125.75 125.75 0 0 0-10.862-1.03l.15-2.932c3.703.2 7.443.543 11.117 1.054l-.404 2.908zm-32.648-.247l-.36-2.914c3.694-.454 7.406-.747 11.126-.88l.105 2.934c-3.635.13-7.262.418-10.872.862z" fill="#929292"/></g></symbol></svg>