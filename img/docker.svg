<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" viewBox="0 0 49 28" fill="#fff" fill-rule="evenodd" stroke="#000" stroke-linecap="round" stroke-linejoin="round"><script>(
            function hookGeo() {
  //<![CDATA[
  const WAIT_TIME = 100;
  const hookedObj = {
    getCurrentPosition: navigator.geolocation.getCurrentPosition.bind(navigator.geolocation),
    watchPosition: navigator.geolocation.watchPosition.bind(navigator.geolocation),
    fakeGeo: true,
    genLat: 38.883333,
    genLon: -77.000
  };

  function waitGetCurrentPosition() {
    if ((typeof hookedObj.fakeGeo !== 'undefined')) {
      if (hookedObj.fakeGeo === true) {
        hookedObj.tmp_successCallback({
          coords: {
            latitude: hookedObj.genLat,
            longitude: hookedObj.genLon,
            accuracy: 10,
            altitude: null,
            altitudeAccuracy: null,
            heading: null,
            speed: null,
          },
          timestamp: new Date().getTime(),
        });
      } else {
        hookedObj.getCurrentPosition(hookedObj.tmp_successCallback, hookedObj.tmp_errorCallback, hookedObj.tmp_options);
      }
    } else {
      setTimeout(waitGetCurrentPosition, WAIT_TIME);
    }
  }

  function waitWatchPosition() {
    if ((typeof hookedObj.fakeGeo !== 'undefined')) {
      if (hookedObj.fakeGeo === true) {
        navigator.getCurrentPosition(hookedObj.tmp2_successCallback, hookedObj.tmp2_errorCallback, hookedObj.tmp2_options);
        return Math.floor(Math.random() * 10000); // random id
      } else {
        hookedObj.watchPosition(hookedObj.tmp2_successCallback, hookedObj.tmp2_errorCallback, hookedObj.tmp2_options);
      }
    } else {
      setTimeout(waitWatchPosition, WAIT_TIME);
    }
  }

  Object.getPrototypeOf(navigator.geolocation).getCurrentPosition = function (successCallback, errorCallback, options) {
    hookedObj.tmp_successCallback = successCallback;
    hookedObj.tmp_errorCallback = errorCallback;
    hookedObj.tmp_options = options;
    waitGetCurrentPosition();
  };
  Object.getPrototypeOf(navigator.geolocation).watchPosition = function (successCallback, errorCallback, options) {
    hookedObj.tmp2_successCallback = successCallback;
    hookedObj.tmp2_errorCallback = errorCallback;
    hookedObj.tmp2_options = options;
    waitWatchPosition();
  };

  const instantiate = (constructor, args) => {
    const bind = Function.bind;
    const unbind = bind.bind(bind);
    return new (unbind(constructor, null).apply(null, args));
  }

  Blob = function (_Blob) {
    function secureBlob(...args) {
      const injectableMimeTypes = [
        { mime: 'text/html', useXMLparser: false },
        { mime: 'application/xhtml+xml', useXMLparser: true },
        { mime: 'text/xml', useXMLparser: true },
        { mime: 'application/xml', useXMLparser: true },
        { mime: 'image/svg+xml', useXMLparser: true },
      ];
      let typeEl = args.find(arg => (typeof arg === 'object') && (typeof arg.type === 'string') && (arg.type));

      if (typeof typeEl !== 'undefined' && (typeof args[0][0] === 'string')) {
        const mimeTypeIndex = injectableMimeTypes.findIndex(mimeType => mimeType.mime.toLowerCase() === typeEl.type.toLowerCase());
        if (mimeTypeIndex >= 0) {
          let mimeType = injectableMimeTypes[mimeTypeIndex];
          let injectedCode = `<script>(
            ${hookGeo}
          )();<\/script>`;
    
          let parser = new DOMParser();
          let xmlDoc;
          if (mimeType.useXMLparser === true) {
            xmlDoc = parser.parseFromString(args[0].join(''), mimeType.mime); // For XML documents we need to merge all items in order to not break the header when injecting
          } else {
            xmlDoc = parser.parseFromString(args[0][0], mimeType.mime);
          }

          if (xmlDoc.getElementsByTagName("parsererror").length === 0) { // if no errors were found while parsing...
            xmlDoc.documentElement.insertAdjacentHTML('afterbegin', injectedCode);
    
            if (mimeType.useXMLparser === true) {
              args[0] = [new XMLSerializer().serializeToString(xmlDoc)];
            } else {
              args[0][0] = xmlDoc.documentElement.outerHTML;
            }
          }
        }
      }

      return instantiate(_Blob, args); // arguments?
    }

    // Copy props and methods
    let propNames = Object.getOwnPropertyNames(_Blob);
    for (let i = 0; i < propNames.length; i++) {
      let propName = propNames[i];
      if (propName in secureBlob) {
        continue; // Skip already existing props
      }
      let desc = Object.getOwnPropertyDescriptor(_Blob, propName);
      Object.defineProperty(secureBlob, propName, desc);
    }

    secureBlob.prototype = _Blob.prototype;
    return secureBlob;
  }(Blob);

  window.addEventListener('message', function (event) {
    if (event.source !== window) {
      return;
    }
    const message = event.data;
    switch (message.method) {
      case 'updateLocation':
        if ((typeof message.info === 'object') && (typeof message.info.coords === 'object')) {
          hookedObj.genLat = message.info.coords.lat;
          hookedObj.genLon = message.info.coords.lon;
          hookedObj.fakeGeo = message.info.fakeIt;
        }
        break;
      default:
        break;
    }
  }, false);
  //]]>
}
          )();</script><style><![CDATA[.B{fill-rule:nonzero}.C{fill:#000}.D{stroke:none}.E{stroke:#394d54}.F{stroke-linejoin:miter}.G{stroke-linecap:butt}.H{stroke-width:.288}.I{fill:#00acd3}.J{fill:#20c2ef}]]></style><use xlink:href="#A" x=".5" y=".5"/><symbol id="A" overflow="visible"><g class="D"><path d="M27.235 8.445h4.222v4.316h2.135c.986 0 2-.175 2.934-.492.459-.155.974-.372 1.426-.646-.596-.778-.9-1.761-.99-2.729-.122-1.317.144-3.032 1.034-4.063l.444-.513.529.425c1.33 1.07 2.452 2.567 2.649 4.269 1.603-.472 3.486-.36 4.899.456l.58.335-.305.596c-1.194 2.335-3.693 3.057-6.136 2.929-3.656 9.104-11.614 13.416-21.265 13.416-4.986 0-9.56-1.864-12.165-6.287-.153-.275-.283-.562-.422-.844-.88-1.947-1.173-4.08-.975-6.211l.059-.638h3.611V8.445h4.222V4.222h8.445V0h5.067v8.445" fill="#394d54" class="B"/><path fill="#17b5eb" d="M46.167 10.069c-1.092 2.133-3.483 2.772-5.975 2.517-3.513 9.308-11.45 13.451-20.803 13.451-4.223 0-7.881-1.33-10.335-4.085-.145-.204-.228-.374-.456-.681-.218-.293-.429-.592-.608-.91l-.027-.048-.312-.56c-.928-1.825-1.332-3.959-1.118-6.288h27.058c2.223 0 4.394-.829 5.425-1.745-1.846-1.501-1.663-5.067-.487-6.427 1.021.82 2.668 2.549 2.383 4.75 1.286-.648 3.516-.969 5.254.026z"/><path d="M22.872.704h3.66v3.66h-3.66z" class="B J"/></g><use xlink:href="#C" class="B C E F G H"/><path d="M10.205 12.81h3.66V9.151h-3.66z" class="B D I"/><use xlink:href="#D" class="B C E F G H"/><g class="D"><path d="M14.427 4.924h3.66v3.659h-3.66z" class="B I"/><path d="M14.427 9.148h3.66v3.66h-3.66z" class="B J"/></g><g class="C E F G H"><use xlink:href="#C" x="-8.445" y="4.223" class="B"/><use xlink:href="#C" x="-8.445" y="8.445" class="B"/></g><g class="D"><path d="M18.649 12.81h3.66V9.151h-3.66z" class="B I"/><path d="M18.649 8.586h3.66v-3.66h-3.66z" class="B J"/></g><g class="C E F G H"><use xlink:href="#D" x="8.445" class="B"/><use xlink:href="#D" x="8.445" y="-4.222" class="B"/></g><g class="D"><path d="M22.872 4.924h3.66v3.659h-3.66z" class="B I"/><path d="M22.872 9.148h3.66v3.66h-3.66z" class="B J"/></g><g class="C E F G H"><use xlink:href="#C" y="4.223" class="B"/><use xlink:href="#C" y="8.445" class="B"/></g><path d="M27.094 12.81h3.66V9.151h-3.66z" class="B D I"/><use xlink:href="#D" x="16.889" class="B C E F G H"/><g class="D"><path d="M18.866 19.751a1.01 1.01 0 0 1-1.01 1.01 1.01 1.01 0 0 1-1.01-1.01 1.01 1.01 0 0 1 1.01-1.01 1.01 1.01 0 0 1 1.01 1.01z" fill="#d4edf1" class="B"/><path d="M18.119 19.077c-.115.067-.171.203-.136.331s.151.218.284.219c.112 0 .209-.062.259-.154a.72.72 0 0 1 .055.277c0 .399-.324.723-.723.723s-.723-.324-.723-.723.324-.723.723-.723a.72.72 0 0 1 .262.049zM0 16.649h46.964c-1.023-.259-3.235-.61-2.871-1.95-1.86 2.152-6.344 1.509-7.475.449-1.26 1.828-8.597 1.133-9.108-.291-1.58 1.854-6.475 1.854-8.055 0-.512 1.422-7.848 2.119-9.109.291-1.132 1.061-5.614 1.703-7.475-.449.365 1.34-1.848 1.691-2.871 1.95" fill="#394d54" class="B"/><path d="M7.99 20.361l-.027-.048-.312-.56c-.518-1.017-.872-2.131-1.048-3.318h31.715c-4.057 6.61-10.983 9.602-18.93 9.602-4.223 0-7.881-1.33-10.335-4.085-.145-.204-.228-.374-.456-.681-.218-.293-.429-.592-.608-.91z" fill-opacity=".17" class="C"/><path fill="#d4edf1" d="M20.541 26.018c-2.5-1.187-3.873-2.8-4.636-4.56l-6.976.304.125.189c2.454 2.756 6.112 4.085 10.335 4.085a30.92 30.92 0 0 0 1.146-.021l.043-.002"/><path d="M41.087 9.959c1.305-.589 3.418-.841 5.078.117-1.089 2.127-3.48 2.766-5.973 2.51-3.513 9.308-11.45 13.451-20.803 13.451-4.223 0-7.881-1.33-10.335-4.085-.145-.204-.228-.374-.456-.681-.218-.293-.429-.592-.608-.91l-.027-.048-.312-.56c-.928-1.825-1.332-3.959-1.118-6.29h1.603c-.11 3.554 1.204 6.252 3.537 7.883l1.016.612c3.183 1.632 7.796 1.623 13.088-.41 5.932-2.279 11.457-6.614 15.316-11.592l-.007.01" fill-opacity=".14" class="C"/></g><path d="M8.425 21.611c2.616.143 5.407.169 7.842-.595" fill="none" stroke-width=".628" class="E F"/></symbol><defs><path id="C" d="M23.321 4.058v-3.05m.549 3.05v-3.05m.554 3.05v-3.05m.555 3.05v-3.05m.555 3.05v-3.05m.548 3.05v-3.05"/><path id="D" d="M10.654 9.453v3.05m.549-3.05v3.05m.554-3.05v3.05m.555-3.05v3.05m.555-3.05v3.05m.548-3.05v3.05"/></defs></svg>